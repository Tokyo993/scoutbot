import asyncio
import json
import os
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument

from config import BOT_TOKEN, REPORT_CHAT_ID, TIMEZONE_OFFSET

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()
db_path = "db.json"

# === –ë–∞–∑–∞ ===
def load_db():
    if os.path.exists(db_path):
        with open(db_path, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

def save_db(data):
    with open(db_path, "w") as f:
        json.dump(data, f, indent=2)

# === /start ===
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    db = load_db()
    user_id = str(message.from_user.id)
    if user_id not in db:
        db[user_id] = {
            "username": message.from_user.username or "-",
            "name": message.from_user.full_name,
            "report_sent": False
        }
        save_db(db)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

# === –û—Ç—á—ë—Ç—ã ===
@dp.message()
async def report_handler(message: types.Message):
    db = load_db()
    user_id = str(message.from_user.id)
    if user_id in db:
        db[user_id]["report_sent"] = True
        save_db(db)

        caption = f"üì® –û—Ç—á—ë—Ç –æ—Ç @{db[user_id]['username']} ({db[user_id]['name']})"

        if message.text:
            await bot.send_message(REPORT_CHAT_ID, f"{caption}\n\n{message.text}")
        elif message.photo:
            await bot.send_photo(REPORT_CHAT_ID, message.photo[-1].file_id, caption=caption)
        elif message.video:
            await bot.send_video(REPORT_CHAT_ID, message.video.file_id, caption=caption)
        elif message.document:
            await bot.send_document(REPORT_CHAT_ID, message.document.file_id, caption=caption)
        else:
            await bot.send_message(REPORT_CHAT_ID, caption)

        await message.answer("–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ!")
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.")

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
async def send_reminders():
    now = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
    print(f"[{now.strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–¥–∞—á–∞ send_reminders() –∞–∫—Ç–∏–≤–Ω–∞")

    day_of_week = now.weekday()  # –ü–Ω = 0, –í—Å = 6
    if day_of_week == 6:
        print("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return

    hour = now.hour
    minute = now.minute

    db = load_db()
    for uid, data in db.items():
        if not data.get("report_sent", False):
            try:
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 23:30
                if hour == 23 and minute == 30:
                    await bot.send_message(
                        uid,
                        "‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –ï—Å–ª–∏ –æ—Ç—á—ë—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ 00:00, "
                        "–∑–∞–≤—Ç—Ä–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å –≤–∞–º–∏ –±–µ—Å–µ–¥—É –ø–æ –ø–æ–≤–æ–¥—É –Ω–µ–≤–æ–≤—Ä–µ–º—è —Å–¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."
                    )
                # –û–±—ã—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å 19:00 –¥–æ 22:00 (–∫–∞–∂–¥—ã–π —á–∞—Å)
                elif hour in range(19, 23) and minute == 0:
                    await bot.send_message(uid, "‚è∞ –í–∏–∂—É, —á—Ç–æ —Ç—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –µ—â—ë –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∑–∞ –¥–µ–Ω—å. –ù–ï –∑–∞–±—É–¥—å –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!")
                    print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {uid}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {uid}: {e}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ 00:00 ===
async def final_check():
    print("[00:01] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á—ë—Ç–æ–≤")
    db = load_db()
    for uid, data in db.items():
        if not data.get("report_sent", False):
            text = f"‚ùå @{data['username']} ({data['name']}) –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç—á—ë—Ç –¥–æ 00:00. –ü–æ—Ä—É—á–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É."
            await bot.send_message(REPORT_CHAT_ID, text)
        db[uid]["report_sent"] = False  # –°–±—Ä–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    save_db(db)

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å 19:00 –¥–æ 22:00 –∫–∞–∂–¥—ã–π —á–∞—Å
scheduler.add_job(send_reminders, "cron", hour="19-22", minute=0, day_of_week="0-5")
# –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ 23:30
scheduler.add_job(send_reminders, "cron", hour=23, minute=30, day_of_week="0-5")
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ 00:00
scheduler.add_job(final_check, "cron", hour=0, minute=1)

# === –°—Ç–∞—Ä—Ç ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
